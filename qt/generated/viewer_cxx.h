/* generated by rust_qt_binding_generator */
#ifndef VIEWER_CXX_H
#define VIEWER_CXX_H

#include <QtCore/QObject>
#include <QtCore/QAbstractItemModel>

class ImageViewer;

class ImageViewer : public QObject
{
    Q_OBJECT
public:
    class Private;
private:
    Private * m_d;
    bool m_ownsPrivate;
    Q_PROPERTY(QString display_path READ display_path NOTIFY display_pathChanged FINAL)
    Q_PROPERTY(bool has_pending READ has_pending NOTIFY has_pendingChanged FINAL)
    Q_PROPERTY(QString image_path READ image_path NOTIFY image_pathChanged FINAL)
    explicit ImageViewer(bool owned, QObject *parent);
public:
    explicit ImageViewer(QObject *parent = nullptr);
    ~ImageViewer();
    QString display_path() const;
    bool has_pending() const;
    QString image_path() const;
    Q_INVOKABLE void apply_threshold_mapping(const QString& thresholds_json) const;
    Q_INVOKABLE void cleanup_scattered_pixels() const;
    Q_INVOKABLE void cleanup_temp_files() const;
    Q_INVOKABLE void gray_preview() const;
    Q_INVOKABLE void refresh_display() const;
    Q_INVOKABLE void save_processed() const;
    Q_INVOKABLE void set_image_path(const QString& path) const;
    Q_INVOKABLE void start_watcher(const QString& path) const;
Q_SIGNALS:
    void display_pathChanged();
    void has_pendingChanged();
    void image_pathChanged();
};
#endif // VIEWER_CXX_H
