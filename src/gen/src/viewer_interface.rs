/* generated by rust_qt_binding_generator */
use libc::{c_char, c_ushort, c_int};
use std::slice;
use std::char::decode_utf16;

use std::sync::Arc;
use std::sync::atomic::{AtomicPtr, Ordering};
use std::ptr::null;

use viewer_impl::*;


pub enum QString {}

fn set_string_from_utf16(s: &mut String, str: *const c_ushort, len: c_int) {
    let utf16 = unsafe { slice::from_raw_parts(str, to_usize(len)) };
    let characters = decode_utf16(utf16.iter().cloned())
        .map(|r| r.unwrap());
    s.clear();
    s.extend(characters);
}



fn to_usize(n: c_int) -> usize {
    if n < 0 {
        panic!("Cannot cast {} to usize", n);
    }
    n as usize
}


fn to_c_int(n: usize) -> c_int {
    if n > c_int::max_value() as usize {
        panic!("Cannot cast {} to c_int", n);
    }
    n as c_int
}


pub struct ImageViewerQObject {}

pub struct ImageViewerEmitter {
    qobject: Arc<AtomicPtr<ImageViewerQObject>>,
    display_path_changed: extern fn(*mut ImageViewerQObject),
    has_pending_changed: extern fn(*mut ImageViewerQObject),
    image_path_changed: extern fn(*mut ImageViewerQObject),
}

unsafe impl Send for ImageViewerEmitter {}

impl ImageViewerEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> ImageViewerEmitter {
        ImageViewerEmitter {
            qobject: self.qobject.clone(),
            display_path_changed: self.display_path_changed,
            has_pending_changed: self.has_pending_changed,
            image_path_changed: self.image_path_changed,
        }
    }
    fn clear(&self) {
        let n: *const ImageViewerQObject = null();
        self.qobject.store(n as *mut ImageViewerQObject, Ordering::SeqCst);
    }
    pub fn display_path_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.display_path_changed)(ptr);
        }
    }
    pub fn has_pending_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.has_pending_changed)(ptr);
        }
    }
    pub fn image_path_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.image_path_changed)(ptr);
        }
    }
}

pub trait ImageViewerTrait {
    fn new(emit: ImageViewerEmitter) -> Self;
    fn emit(&mut self) -> &mut ImageViewerEmitter;
    fn display_path(&self) -> &str;
    fn has_pending(&self) -> bool;
    fn image_path(&self) -> &str;
    fn apply_threshold_mapping(&self, thresholds_json: String) -> ();
    fn cleanup_scattered_pixels(&self) -> ();
    fn cleanup_temp_files(&self) -> ();
    fn gray_preview(&self) -> ();
    fn refresh_display(&self) -> ();
    fn save_processed(&self) -> ();
    fn set_image_path(&self, path: String) -> ();
    fn start_watcher(&self, path: String) -> ();
}

#[no_mangle]
pub extern "C" fn image_viewer_new(
    image_viewer: *mut ImageViewerQObject,
    image_viewer_display_path_changed: extern fn(*mut ImageViewerQObject),
    image_viewer_has_pending_changed: extern fn(*mut ImageViewerQObject),
    image_viewer_image_path_changed: extern fn(*mut ImageViewerQObject),
) -> *mut ImageViewer {
    let image_viewer_emit = ImageViewerEmitter {
        qobject: Arc::new(AtomicPtr::new(image_viewer)),
        display_path_changed: image_viewer_display_path_changed,
        has_pending_changed: image_viewer_has_pending_changed,
        image_path_changed: image_viewer_image_path_changed,
    };
    let d_image_viewer = ImageViewer::new(image_viewer_emit);
    Box::into_raw(Box::new(d_image_viewer))
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_free(ptr: *mut ImageViewer) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_display_path_get(
    ptr: *const ImageViewer,
    p: *mut QString,
    set: extern fn(*mut QString, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.display_path();
    let s: *const c_char = v.as_ptr() as *const c_char;
    set(p, s, to_c_int(v.len()));
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_has_pending_get(ptr: *const ImageViewer) -> bool {
    (&*ptr).has_pending()
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_image_path_get(
    ptr: *const ImageViewer,
    p: *mut QString,
    set: extern fn(*mut QString, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.image_path();
    let s: *const c_char = v.as_ptr() as *const c_char;
    set(p, s, to_c_int(v.len()));
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_apply_threshold_mapping(ptr: *const ImageViewer, thresholds_json_str: *const c_ushort, thresholds_json_len: c_int) {
    let mut thresholds_json = String::new();
    set_string_from_utf16(&mut thresholds_json, thresholds_json_str, thresholds_json_len);
    let o = &*ptr;
    o.apply_threshold_mapping(thresholds_json)
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_cleanup_scattered_pixels(ptr: *const ImageViewer) {
    let o = &*ptr;
    o.cleanup_scattered_pixels()
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_cleanup_temp_files(ptr: *const ImageViewer) {
    let o = &*ptr;
    o.cleanup_temp_files()
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_gray_preview(ptr: *const ImageViewer) {
    let o = &*ptr;
    o.gray_preview()
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_refresh_display(ptr: *const ImageViewer) {
    let o = &*ptr;
    o.refresh_display()
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_save_processed(ptr: *const ImageViewer) {
    let o = &*ptr;
    o.save_processed()
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_set_image_path(ptr: *const ImageViewer, path_str: *const c_ushort, path_len: c_int) {
    let mut path = String::new();
    set_string_from_utf16(&mut path, path_str, path_len);
    let o = &*ptr;
    o.set_image_path(path)
}

#[no_mangle]
pub unsafe extern "C" fn image_viewer_start_watcher(ptr: *const ImageViewer, path_str: *const c_ushort, path_len: c_int) {
    let mut path = String::new();
    set_string_from_utf16(&mut path, path_str, path_len);
    let o = &*ptr;
    o.start_watcher(path)
}
